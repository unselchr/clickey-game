{"version":3,"sources":["components/container/container.js","components/picture/picture.js","App.js","serviceWorker.js","index.js"],"names":["container","props","react_default","a","createElement","className","children","picture","data-id","id","data-order","order","onClick","clickHandler","alt","src","image","App","state","images","score","_this","find","element","clicked","setState","i","shuffle","nums","random","Math","floor","length","randomNum","splice","sort","b","_this2","this","components_container_container","map","components_picture_picture","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"64EAIeA,SAFG,SAAAC,GAAK,OAAGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMK,mBCM7CC,SALA,SAAAN,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKI,UAASP,EAAMQ,GAAIC,aAAYT,EAAMU,MAAON,UAAU,OAAOO,QAAS,kBAAIX,EAAMY,aAAaZ,EAAMQ,MACpGP,EAAAC,EAAAC,cAAA,OAAKU,IAAI,GAAGC,IAAKd,EAAMe,WC4DhBC,6MA5DbC,MAAQ,CACNC,SACAC,MAAO,KAGTP,aAAe,SAAAJ,GACb,IAAIU,EAASE,EAAKH,MAAMC,OAExB,IAA4D,IAAxDA,EAAOG,KAAK,SAACC,GAAD,OAAaA,EAAQd,KAAOA,IAAIe,QAC9CL,EAAOG,KAAK,SAAAC,GAAO,OAAIA,EAAQd,KAAOA,IAAIe,SAAU,EACpDH,EAAKI,SAAS,CAAEL,MAAOC,EAAKH,MAAME,MAAQ,QAEvC,CACH,IAAK,IAAIM,EAAI,EAAGA,EAAI,GAAIA,IACtBP,EAAOG,KAAK,SAAAC,GAAO,OAAIA,EAAQd,KAAOA,IAAIe,SAAU,EAEtDH,EAAKI,SAAS,CAAEL,MAAO,IAEzBC,EAAKM,aAGPA,QAAU,WAIR,IAHA,IAAIR,EAASE,EAAKH,MAAMC,OAEpBS,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IACtCF,EAAI,EAAGA,GAAK,GAAIA,IAAK,CAC5B,IAAIG,EAASC,KAAKC,MAAMD,KAAKD,SAAWD,EAAKI,QACzCC,EAAYL,EAAKC,GACrBD,EAAKM,OAAOL,EAAQ,GAEpBV,EAAOO,EAAI,GAAGf,MAAQsB,EAExBd,EAAOgB,KAAK,SAAChC,EAAGiC,GACd,OAAIjC,EAAEQ,MAAQyB,EAAEzB,MACP,GAGC,IAGZU,EAAKI,SAAS,CAAEN,oFAGT,IAAAkB,EAAAC,KACP,OACEpC,EAAAC,EAAAC,cAACmC,EAAD,KACErC,EAAAC,EAAAC,cAAA,MAAIK,GAAG,SAAP,eAA4B6B,KAAKpB,MAAME,OACtCkB,KAAKpB,MAAMC,OAAOqB,IAAI,SAAAxB,GAAK,OAC1Bd,EAAAC,EAAAC,cAACqC,EAAD,CACEzB,MAAOA,EAAMA,MACbH,aAAcwB,EAAKxB,aACnBJ,GAAIO,EAAMP,OAGdP,EAAAC,EAAAC,cAAA,KAAGK,GAAG,gBAAN,+CAvDUiC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c9e28720.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./container.css\";\r\nconst container = props=> <div className=\"container\">{props.children}</div>;\r\n\r\nexport default container;","import React from \"react\";\r\nimport \"./picture.css\";\r\n\r\nconst picture= props=>(\r\n    <div data-id={props.id} data-order={props.order} className=\"card\" onClick={()=>props.clickHandler(props.id)}>\r\n        <img alt=\"\" src={props.image}/>\r\n    </div>\r\n)\r\nexport default picture;","import React, { Component } from 'react';\nimport Container from \"./components/container\";\nimport images from \"./images.json\";\nimport Picture from \"./components/picture\";\nclass App extends Component {\n  state = {\n    images,\n    score: 0\n  };\n\n  clickHandler = id => {\n    let images = this.state.images;\n    //console.log(images.find(element=>element.id===id));\n    if (images.find((element) => element.id === id).clicked === false) {\n      images.find(element => element.id === id).clicked = true;\n      this.setState({ score: this.state.score + 1 });\n    }\n    else {\n      for (let i = 0; i < 12; i++) {\n        images.find(element => element.id === id).clicked = false;\n      }\n      this.setState({ score: 0 });\n    }\n    this.shuffle();\n    //console.log(this.state.score);\n  };\n  shuffle = () => {\n    let images = this.state.images;\n    //console.log(images);\n    let nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n    for (let i = 1; i <= 12; i++) {\n      let random = Math.floor(Math.random() * nums.length);\n      let randomNum = nums[random];\n      nums.splice(random, 1);\n      //we stored a random number out of the arr of 1 thru 12 and then removed it from the array\n      images[i - 1].order = randomNum;\n    }\n    images.sort((a, b) => {\n      if (a.order < b.order) {\n        return 1;\n      }\n      else {\n        return -1;\n      }\n    })\n    this.setState({ images })\n  }\n\n  render() {\n    return (\n      <Container>\n        <h3 id=\"score\">Your Score: {this.state.score}</h3>\n        {this.state.images.map(image => (\n          <Picture\n            image={image.image}\n            clickHandler={this.clickHandler}\n            id={image.id}\n          />\n        ))}\n        <p id=\"instructions\">Dont click on the same image twice.</p>\n      </Container>\n    )\n  }\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}